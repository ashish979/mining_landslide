/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dm;

import javax.swing.*;

/**
 *
 * @author Ashish
 */
public class predict2 extends javax.swing.JFrame {
    JTable table,training;
    int i,j,k,tempcc;
        String[] x=new String[7];
        String[] clabel;        
        String[] tlabel;
        int[] cclabel=new int[5];
        int rows,count_no[]=new int[7];
        double[] pclabel=new double[5];
        double[][] px_c=new double[5][7];
        double[] pX_C=new double[5];
        double[] pC_X=new double[5];
        int m;

    /**
     * Creates new form predict2
     */
    public predict2() {
        initComponents();
    }
    public predict2(JTable training,JTable table){
        m=0;
        this.table=table;
        this.training=training;
        System.out.print(table.getModel().getRowCount());
        System.out.print(training.getModel().getRowCount());
        clabel = new String[5];
        tlabel = new String[5];
         for(i=0;i<5;i++){
            cclabel[i]=0;
        }
        clabel[0]=tlabel[0]="high";
        clabel[1]=tlabel[1]="very high";
        clabel[2]=tlabel[2]="low";
        clabel[3]=tlabel[3]="Moderate";
        clabel[4]=tlabel[4]="very low";
        
        count_no[0]=6;
        count_no[1]=8;
        count_no[2]=8;
        count_no[3]=5;
        count_no[4]=8;
        count_no[5]=5;
        count_no[6]=7;
        
        rows=training.getModel().getRowCount();
        
         for(j=0;j<5;j++){
                for(i=0;i<rows;i++){
            if(clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                cclabel[j]++;                
            }
            pclabel[j]=(double)(double)cclabel[j]/(double)rows;
            }
        }
        initComponents();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Confusion Matrix");

        jButton1.setText("PREDICT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Confusion Matrix");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"high", null, null, null, null, null, null, null},
                {"very high", null, null, null, null, null, null, null},
                {"low", null, null, null, null, null, null, null},
                {"moderate", null, null, null, null, null, null, null},
                {"very low", null, null, null, null, null, null, null},
                {"sum", null, null, null, null, null, null, null}
            },
            new String [] {
                "", "high", "very high", "low", "moderate", "very low", "sum", "recognition"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1067, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(380, 380, 380)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        setBounds(0, 0, 1077, 306);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int[][] conf_mat=new int[5][5];
        int[] conf_row=new int[5];
        int[] conf_col=new int[5];
        double[] rec=new double[5];
        for(i=0;i<5;i++){
            conf_row[i]=conf_col[i]=0;
            rec[i]=0.0;
        }
                
         for(int i=0;i<rows;i++){
             for(j=0;j<7;j++){
                 x[j]=(String)table.getModel().getValueAt(i,j);
             }
             table.getModel().setValueAt(predictLabel(x), i, 6);
             //System.out.println(i+"  -> " +predictLabel(x));
         }
      /*  for(int i=0;i<rows;i++){
            System.out.println(""+table.getModel().getValueAt(i, 6));
        }*/
               
        //CREATING THE CONFUSION MATRIX
        for(i=0;i<rows;i++){
            for(j=0;j<5;j++){
                for(k=0;k<5;k++){
                    if(clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0&&tlabel[k].compareTo((String)table.getModel().getValueAt(i,6))==0){
                           conf_mat[j][k]++;
                    }
            }
        }          
        }
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                conf_row[i]=conf_row[i]+conf_mat[i][j];
                }
        }
        for(i=0;i<5;i++){
            for(j=0;j<5;j++){
                conf_col[i]=conf_col[i]+conf_mat[j][i];
                }
        }
        for(i=0;i<5;i++){
            rec[i]=(double)((double)conf_mat[i][i]/(double)conf_row[i]);
        }
        
        System.out.println("\nConf mat \n");
        for(j=0;j<5;j++){
                for(k=0;k<5;k++){
                System.out.print(" "+conf_mat[j][k]); 
               // jTextArea1.append(" "+conf_mat[j][k]); 
                jTable1.setValueAt(conf_mat[j][k], j, k+1);                
                }
                System.out.print(" "+conf_row[j]+" "+rec[j]);
               // jTextArea1.append(" "+conf_row[j]+" "+rec[j]);
                jTable1.setValueAt(conf_row[j], j, k+1);
                jTable1.setValueAt(rec[j], j, k+2);
                System.out.println();    
               // jTextArea1.append("\n");
        }
        for(i=0;i<5;i++){
            System.out.print(" "+conf_col[i]);
           // jTextArea1.append(" "+conf_col[i]);
            jTable1.setValueAt(conf_col[i], 5, i+1);
        }
        double[][] graph;
        graph = new double[5][2];
        for(i=0;i<5;i++){
            graph[i][1]=rec[i];
            graph[i][0]=2*i+1;
            
        }
        g2 g=new g2(graph);
        g.setVisible(true);
        
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
String predictLabel(String[] x){
     //PROBABILITY OF GIVEN CONDITION P(X|C)
    for(i=0;i<5;i++){
        for(j=0;j<7;j++){
            px_c[i][j]=0.0;
        }
        pC_X[i]=0.0;
    }
         for(j=0;j<5;j++){
         for(i=0;i<rows;i++){                                 
                 if(x[0].compareTo((String)training.getModel().getValueAt(i,1))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][0]++;
                 }
                 if(x[1].compareTo((String)training.getModel().getValueAt(i,9))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][1]++;
                 }
                 if(x[2].compareTo((String)training.getModel().getValueAt(i,5))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][2]++;
                 }
                 if(x[3].compareTo((String)training.getModel().getValueAt(i,13))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][3]++;
                 }
                 if(x[4].compareTo((String)training.getModel().getValueAt(i,18))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][4]++;
                 }
                 if(x[5].compareTo((String)training.getModel().getValueAt(i,22))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][5]++;
                 }
                 if(x[6].compareTo((String)training.getModel().getValueAt(i,26))==0&&clabel[j].compareTo((String)training.getModel().getValueAt(i,31))==0){
                px_c[j][6]++;
                 }
            
             }
         //using laplasian corrector
         
         for(k=0;k<7;k++){
             tempcc=0;
             if(px_c[j][k]==0.0){
         px_c[j][k]=1;
         tempcc=cclabel[j]+count_no[k];
             }
             else{
                 tempcc=cclabel[j];
             }
         px_c[j][k]/=(double)tempcc;}
         
         }
      // System.out.println("Probability of X_C for each attribute and label:");
      /*   for(i=0;i<5;i++){
             for(j=0;j<7;j++){
                 System.out.print(" "+px_c[i][j]);
             }
             System.out.println();
         }*/
         
         
         for(j=0;j<5;j++){
               pX_C[j]=1.000000;
           }
       for(i=0;i<5;i++){
           for(j=0;j<7;j++){
               pX_C[i]=pX_C[i]*px_c[i][j];
           }
       }
      /* System.out.println("Probability of X_C for each class label");
       for(j=0;j<5;j++){
         System.out.println(pX_C[j]);
           }*/
       
         //USING NAIVE BAYSIAN TO PREDICT
         for(i=0;i<5;i++){
             pC_X[i]=pX_C[i]*pclabel[i];
         }
        /* System.out.println("Probability of C_X:");
         for(j=0;j<5;j++){
         System.out.println(pX_C[j]);
           }*/
         
        double max=0.0;
        for(i=0;i<5;i++){
            
                if(pC_X[i]>max){
                    max=pC_X[i];
                }
            }
        
        for(i=0;i<5;i++){            
                if(max==pC_X[i]){
                    break;
                }
                    }
        m++;
       System.out.println(m+" -> "+clabel[i]);
       return clabel[i];
       // JOptionPane.showMessageDialog(null,"Landslide Prediction : "+clabel[i]);
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(predict2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(predict2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(predict2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(predict2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new predict2().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
